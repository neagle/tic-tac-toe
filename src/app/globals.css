@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-rgb: 214, 219, 220;
}

body {
  color: rgb(var(--foreground-rgb));
  background: rgb(var(--background-rgb));
}

main {
  @apply flex min-h-screen flex-col items-center p-24;

  > h1 {
    @apply text-xl mb-5 font-bold;
  }
}

.game {
  @apply flex flex-col;

  > :first-child {
    @apply text-center;
  }

  > :last-child {
    @apply w-80;
  }
}

.grid {
  --size: 200px;
  --gridSize: 5px;
  --gridUnit: calc((var(--size) - (var(--gridSize) * 2)) / 3);
  --unit: calc(var(--size) / 3);
  margin: 50px;
  display: grid;
  grid-template-rows: 1fr 1fr 1fr;
  grid-template-columns: 1fr 1fr 1fr;
  height: var(--size);
  width: var(--size);
  background-color: black;
  grid-gap: var(--gridSize);
  position: relative;

  &:after {
    --offset: 0;
    content: "";
    position: absolute;
    top: var(--offset);
    right: var(--offset);
    left: var(--offset);
    bottom: var(--offset);
    border: 10px solid transparent;
    pointer-events: none;
    opacity: 0.5;
    transition: all 0.2s;
  }

  &.my-move:after {
    --pulseVariation: 10px;
    border-color: hsl(100, 50%, 50%);
    --offset: -20px;
    top: var(--offset);
    right: var(--offset);
    left: var(--offset);
    bottom: var(--offset);

    animation-name: outlinePulse;
    animation-duration: 2s;
    animation-iteration-count: infinite;
    animation-timing-function: ease-in-out;
  }

  &.draw {
    opacity: 0.5;
  }

  &.game-not-over > .open {
    cursor: pointer;
  }

  > div {
    background-color: rgb(var(--background-rgb));
    display: grid;
    justify-items: center;
    align-items: center;
    user-select: none;
    line-height: 0;

    svg {
      &.x {
        color: orange;
      }
      &.o {
        color: green;
      }
      --padding: 5px;
      --svgSize: calc(var(--unit) - var(--padding) * 2);
      height: var(--svgSize);
      width: var(--svgSize);
      color: blue;
      animation-name: pieceEnter;
      animation-duration: 0.3s;
      animation-iteration-count: 1;
    }
  }

  .win {
    pointer-events: none;
    border-radius: 5px;
    display: block;
    background-color: red;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: calc(var(--gridSize) * 2);
    > line {
      color: red;
      position: absolute;
    }

    animation-duration: 1.5s;
    animation-iteration-count: 1;

    &.horizontal {
      width: 100%;
      height: calc(var(--gridSize) * 2);
      animation-name: drawInHorizontal;
    }

    &.vertical {
      height: 100%;
      width: calc(var(--gridSize) * 2);
      animation-name: drawInVertical;
    }
    &.diagonal {
      width: calc((100% - var(--gridSize)) * 1.41421);
      height: calc(var(--gridSize) * 2);
      animation-name: drawInDiagonal;
    }

    &.horizontal.top {
      top: calc(var(--gridUnit) / 2 - var(--gridSize));
    }
    &.horizontal.middle {
      top: calc(var(--gridUnit) + var(--gridUnit) / 2);
    }
    &.horizontal.bottom {
      top: auto;
      bottom: calc(var(--gridUnit) / 2 - var(--gridSize));
    }
    &.vertical.left {
      left: calc(var(--gridUnit) / 2 - var(--gridSize));
    }
    &.vertical.middle {
      left: calc(var(--gridUnit) + var(--gridUnit) / 2);
    }
    &.vertical.right {
      left: auto;
      right: calc(var(--gridUnit) / 2 - var(--gridSize));
    }
    &.diagonal.right {
      top: auto;
      bottom: 0;
      transform-origin: var(--gridSize) var(--gridSize);
      transform: rotate(-45deg);
    }
    &.diagonal.left {
      transform-origin: var(--gridSize) var(--gridSize);
      transform: rotate(45deg);
    }
  }

  + button {
    @apply border-4 border-black p-2 hover:bg-green-500 transition-colors mb-8 sm:mb-0;
  }
}

@keyframes drawInHorizontal {
  0% {
    width: 0;
  }
  100% {
    width: 100%;
  }
}

@keyframes drawInVertical {
  0% {
    height: 0;
  }
  100% {
    height: 100%;
  }
}

@keyframes drawInDiagonal {
  0% {
    width: 0;
  }
  100% {
    width: calc((100% - var(--gridSize)) * 1.41421);
  }
}

@keyframes pieceEnter {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

.restart {
  &.hidden {
    opacity: 0;
  }

  display: block;
  margin: 1em auto 0;
  transition: opacity 0.5s;
  cursor: pointer;
}

@keyframes outlinePulse {
  0% {
    top: var(--offset);
    right: var(--offset);
    bottom: var(--offset);
    left: var(--offset);
  }
  50% {
    top: calc(var(--offset) - var(--pulseVariation));
    right: calc(var(--offset) - var(--pulseVariation));
    bottom: calc(var(--offset) - var(--pulseVariation));
    left: calc(var(--offset) - var(--pulseVariation));
  }
  100% {
    top: var(--offset);
    right: var(--offset);
    bottom: var(--offset);
    left: var(--offset);
  }
}

.chat {
  > div {
    @apply flex flex-col h-full grow;
  }

  .messages {
    @apply p-2 grow bg-white min-h-[200px] sm:min-h-0;
  }

  .chat-input {
    @apply flex;

    input {
      @apply grow p-2 focus:outline outline-4 outline-red-500;
    }

    button {
      @apply p-2 pr-0 disabled:opacity-50;
    }
  }
}

.system-message {
  @apply text-gray-500;
}

.user-message {
  @apply block border-green-100;

  button {
    /* Make the button and pop-out invisible until the user hovers over them */
    > span {
      @apply opacity-0 cursor-default transition-opacity;
    }
    > ul {
      @apply opacity-0 transition-opacity z-10 pointer-events-none;
    }
  }

  &:hover {
    .create-reaction {
      /* Reveal the create reaction button when the user hovers over the message */
      @apply opacity-100;

      button > span {
        @apply opacity-100;
      }

      /* Reveal the list of emojis when the user hovers over the button */
      &:hover {
        button > ul {
          @apply opacity-100 pointer-events-auto;
        }
      }
    }
  }

  > b {
    @apply font-mono;
  }
}

.player-x {
  @apply text-orange-400;
}

.player-o {
  @apply text-green-600;
}

.create-reaction {
  @apply ml-1;

  > button {
    @apply relative;

    > span {
      @apply text-sm pl-1 pr-1;
    }
  }

  ul {
    @apply absolute flex -right-1 rounded-lg bg-white p-1 shadow-md;

    > li {
      @apply inline-block;

      a {
        @apply rounded-full cursor-pointer inline-block text-2xl p-1 pt-0 origin-center scale-75 hover:scale-100 transition-transform;

        &.selected {
          @apply bg-green-500;
        }
      }
    }
  }
}

.status {
  @apply p-2 text-xs text-gray-500;
}

.display-reactions {
  @apply ml-7 -mt-1;

  > b {
    @apply ml-1;
  }
}

.play-again-link {
  @apply mt-2;
  a {
    @apply cursor-pointer underline underline-offset-2 text-blue-500;
  }
}
